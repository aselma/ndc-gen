// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ndc_gen

import (
"context"
"fmt"
//"io"
"strconv"
//"time"
"sync"
//"sync/atomic"
"errors"
"bytes"
"github.com/vektah/gqlparser"
"github.com/vektah/gqlparser/ast"
"github.com/99designs/gqlgen/graphql"
"github.com/99designs/gqlgen/graphql/introspection")

// region    ************************** generated!.gotpl **************************
















// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers: cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {Query() QueryResolver
	
}

type DirectiveRoot struct {

	Deprecated func(ctx context.Context, obj interface{}, next graphql.Resolver, reason *string) (res interface{}, err error)

	Include func(ctx context.Context, obj interface{}, next graphql.Resolver, ub bool) (res interface{}, err error)

	Skip func(ctx context.Context, obj interface{}, next graphql.Resolver, ub bool) (res interface{}, err error)

}

type ComplexityRoot struct {

	AdviseMessage struct {
		Code func(childComplexity int) int
			CorrelationID func(childComplexity int) int
			Description func(childComplexity int) int
			External func(childComplexity int) int
			Level func(childComplexity int) int
			
		}

	AirShoppingRs struct {
		Errors func(childComplexity int) int
			Response func(childComplexity int) int
			
		}

	AmountType struct {
		Amount func(childComplexity int) int
			CurCode func(childComplexity int) int
			
		}

	CarrierOffers struct {
		Carrier func(childComplexity int) int
			Offers func(childComplexity int) int
			
		}

	DataLists struct {
		PaxJourneyList func(childComplexity int) int
			PaxList func(childComplexity int) int
			PaxSegmentList func(childComplexity int) int
			
		}

	DatedMarketingSegmentType struct {
		CarrierDesigCode func(childComplexity int) int
			MarketingCarrierFlightNumberText func(childComplexity int) int
			
		}

	Error struct {
		Code func(childComplexity int) int
			Description func(childComplexity int) int
			Type func(childComplexity int) int
			
		}

	ExternalMessage struct {
		Code func(childComplexity int) int
			Message func(childComplexity int) int
			
		}

	Fee struct {
		Amount func(childComplexity int) int
			DescText func(childComplexity int) int
			
		}

	FlightPax struct {
		Age func(childComplexity int) int
			PaxID func(childComplexity int) int
			Ptc func(childComplexity int) int
			
		}

	FlightXQuery struct {
		Book func(childComplexity int, offerID *string) int
			Cancel func(childComplexity int, orderID *string) int
			Issue func(childComplexity int, orderID *string) int
			Quote func(childComplexity int, offerID *string) int
			Retrieve func(childComplexity int, orderID *string) int
			Search func(childComplexity int, request *AirShoppingRQBasic) int
			
		}

	Individual struct {
		AdviseMessage func(childComplexity int) int
			Code func(childComplexity int) int
			CreatedAt func(childComplexity int) int
			IndividualData func(childComplexity int) int
			UpdatedAt func(childComplexity int) int
			
		}

	IndividualData struct {
		BirthDate func(childComplexity int) int
			Code func(childComplexity int) int
			Name func(childComplexity int) int
			Surname func(childComplexity int) int
			Title func(childComplexity int) int
			
		}

	Offer struct {
		OfferID func(childComplexity int) int
			OfferItems func(childComplexity int) int
			TotalPrice func(childComplexity int) int
			
		}

	OfferItem struct {
		OfferItemID func(childComplexity int) int
			PriceFlight func(childComplexity int) int
			PriceHotel func(childComplexity int) int
			Services func(childComplexity int) int
			
		}

	PaxJourney struct {
		PaxJourneyID func(childComplexity int) int
			PaxSegmentRefID func(childComplexity int) int
			
		}

	PaxSegment struct {
		Arrival func(childComplexity int) int
			Dep func(childComplexity int) int
			MarketingCarrierInfo func(childComplexity int) int
			PaxSegmentID func(childComplexity int) int
			
		}

	Price struct {
		Gross func(childComplexity int) int
			Net func(childComplexity int) int
			
		}

	PriceX struct {
		BaseAmount func(childComplexity int) int
			Fee func(childComplexity int) int
			Surcharge func(childComplexity int) int
			TaxSummary func(childComplexity int) int
			TotalAmount func(childComplexity int) int
			
		}

	Query struct {
		FlightX func(childComplexity int) int
			
		}

	ResponseX struct {
		DataLists func(childComplexity int) int
			OffersGroup func(childComplexity int) int
			
		}

	Service struct {
		PaxRefID func(childComplexity int) int
			ServiceAssociations func(childComplexity int) int
			ServiceID func(childComplexity int) int
			
		}

	ServiceAssociations struct {
		PaxJourneyRefID func(childComplexity int) int
			
		}

	SurchargeX struct {
		Breakdown func(childComplexity int) int
			TotalAmount func(childComplexity int) int
			
		}

	TaxSummaryType struct {
		Tax func(childComplexity int) int
			TotalTaxAmount func(childComplexity int) int
			
		}

	TaxType struct {
		Amount func(childComplexity int) int
			DescText func(childComplexity int) int
			
		}

	TextType struct {
		Text func(childComplexity int) int
			
		}

	TransportArrivalType struct {
		IataLocationCode func(childComplexity int) int
			
		}

	TransportDepType struct {
		AircraftScheduledDateTime func(childComplexity int) int
			IataLocationCode func(childComplexity int) int
			
		}

	

	

	

	

	

	

}


		type QueryResolver interface {
		FlightX(ctx context.Context) (*FlightXQuery, error)
		
		
		
		}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {
	
		
			case "AdviseMessage.code":
							if e.complexity.AdviseMessage.Code == nil {
								break
							}
							
							return e.complexity.AdviseMessage.Code(childComplexity), true
						
			case "AdviseMessage.correlationID":
							if e.complexity.AdviseMessage.CorrelationID == nil {
								break
							}
							
							return e.complexity.AdviseMessage.CorrelationID(childComplexity), true
						
			case "AdviseMessage.description":
							if e.complexity.AdviseMessage.Description == nil {
								break
							}
							
							return e.complexity.AdviseMessage.Description(childComplexity), true
						
			case "AdviseMessage.external":
							if e.complexity.AdviseMessage.External == nil {
								break
							}
							
							return e.complexity.AdviseMessage.External(childComplexity), true
						
			case "AdviseMessage.level":
							if e.complexity.AdviseMessage.Level == nil {
								break
							}
							
							return e.complexity.AdviseMessage.Level(childComplexity), true
						
			
		
	
		
			case "AirShoppingRS.errors":
							if e.complexity.AirShoppingRs.Errors == nil {
								break
							}
							
							return e.complexity.AirShoppingRs.Errors(childComplexity), true
						
			case "AirShoppingRS.response":
							if e.complexity.AirShoppingRs.Response == nil {
								break
							}
							
							return e.complexity.AirShoppingRs.Response(childComplexity), true
						
			
		
	
		
			case "AmountType.amount":
							if e.complexity.AmountType.Amount == nil {
								break
							}
							
							return e.complexity.AmountType.Amount(childComplexity), true
						
			case "AmountType.curCode":
							if e.complexity.AmountType.CurCode == nil {
								break
							}
							
							return e.complexity.AmountType.CurCode(childComplexity), true
						
			
		
	
		
			case "CarrierOffers.carrier":
							if e.complexity.CarrierOffers.Carrier == nil {
								break
							}
							
							return e.complexity.CarrierOffers.Carrier(childComplexity), true
						
			case "CarrierOffers.offers":
							if e.complexity.CarrierOffers.Offers == nil {
								break
							}
							
							return e.complexity.CarrierOffers.Offers(childComplexity), true
						
			
		
	
		
			case "DataLists.paxJourneyList":
							if e.complexity.DataLists.PaxJourneyList == nil {
								break
							}
							
							return e.complexity.DataLists.PaxJourneyList(childComplexity), true
						
			case "DataLists.paxList":
							if e.complexity.DataLists.PaxList == nil {
								break
							}
							
							return e.complexity.DataLists.PaxList(childComplexity), true
						
			case "DataLists.paxSegmentList":
							if e.complexity.DataLists.PaxSegmentList == nil {
								break
							}
							
							return e.complexity.DataLists.PaxSegmentList(childComplexity), true
						
			
		
	
		
			case "DatedMarketingSegmentType.carrierDesigCode":
							if e.complexity.DatedMarketingSegmentType.CarrierDesigCode == nil {
								break
							}
							
							return e.complexity.DatedMarketingSegmentType.CarrierDesigCode(childComplexity), true
						
			case "DatedMarketingSegmentType.MarketingCarrierFlightNumberText":
							if e.complexity.DatedMarketingSegmentType.MarketingCarrierFlightNumberText == nil {
								break
							}
							
							return e.complexity.DatedMarketingSegmentType.MarketingCarrierFlightNumberText(childComplexity), true
						
			
		
	
		
			case "Error.code":
							if e.complexity.Error.Code == nil {
								break
							}
							
							return e.complexity.Error.Code(childComplexity), true
						
			case "Error.description":
							if e.complexity.Error.Description == nil {
								break
							}
							
							return e.complexity.Error.Description(childComplexity), true
						
			case "Error.type":
							if e.complexity.Error.Type == nil {
								break
							}
							
							return e.complexity.Error.Type(childComplexity), true
						
			
		
	
		
			case "ExternalMessage.code":
							if e.complexity.ExternalMessage.Code == nil {
								break
							}
							
							return e.complexity.ExternalMessage.Code(childComplexity), true
						
			case "ExternalMessage.message":
							if e.complexity.ExternalMessage.Message == nil {
								break
							}
							
							return e.complexity.ExternalMessage.Message(childComplexity), true
						
			
		
	
		
			case "Fee.amount":
							if e.complexity.Fee.Amount == nil {
								break
							}
							
							return e.complexity.Fee.Amount(childComplexity), true
						
			case "Fee.descText":
							if e.complexity.Fee.DescText == nil {
								break
							}
							
							return e.complexity.Fee.DescText(childComplexity), true
						
			
		
	
		
			case "FlightPax.age":
							if e.complexity.FlightPax.Age == nil {
								break
							}
							
							return e.complexity.FlightPax.Age(childComplexity), true
						
			case "FlightPax.paxID":
							if e.complexity.FlightPax.PaxID == nil {
								break
							}
							
							return e.complexity.FlightPax.PaxID(childComplexity), true
						
			case "FlightPax.ptc":
							if e.complexity.FlightPax.Ptc == nil {
								break
							}
							
							return e.complexity.FlightPax.Ptc(childComplexity), true
						
			
		
	
		
			case "FlightXQuery.book":
							if e.complexity.FlightXQuery.Book == nil {
								break
							}
							
								args, err := ec.field_FlightXQuery_book_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.FlightXQuery.Book(childComplexity, args["offerID"].(*string) ), true
						
			case "FlightXQuery.cancel":
							if e.complexity.FlightXQuery.Cancel == nil {
								break
							}
							
								args, err := ec.field_FlightXQuery_cancel_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.FlightXQuery.Cancel(childComplexity, args["orderID"].(*string) ), true
						
			case "FlightXQuery.issue":
							if e.complexity.FlightXQuery.Issue == nil {
								break
							}
							
								args, err := ec.field_FlightXQuery_issue_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.FlightXQuery.Issue(childComplexity, args["orderID"].(*string) ), true
						
			case "FlightXQuery.quote":
							if e.complexity.FlightXQuery.Quote == nil {
								break
							}
							
								args, err := ec.field_FlightXQuery_quote_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.FlightXQuery.Quote(childComplexity, args["offerID"].(*string) ), true
						
			case "FlightXQuery.retrieve":
							if e.complexity.FlightXQuery.Retrieve == nil {
								break
							}
							
								args, err := ec.field_FlightXQuery_retrieve_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.FlightXQuery.Retrieve(childComplexity, args["orderID"].(*string) ), true
						
			case "FlightXQuery.search":
							if e.complexity.FlightXQuery.Search == nil {
								break
							}
							
								args, err := ec.field_FlightXQuery_search_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.FlightXQuery.Search(childComplexity, args["request"].(*AirShoppingRQBasic) ), true
						
			
		
	
		
			case "Individual.adviseMessage":
							if e.complexity.Individual.AdviseMessage == nil {
								break
							}
							
							return e.complexity.Individual.AdviseMessage(childComplexity), true
						
			case "Individual.code":
							if e.complexity.Individual.Code == nil {
								break
							}
							
							return e.complexity.Individual.Code(childComplexity), true
						
			case "Individual.createdAt":
							if e.complexity.Individual.CreatedAt == nil {
								break
							}
							
							return e.complexity.Individual.CreatedAt(childComplexity), true
						
			case "Individual.individualData":
							if e.complexity.Individual.IndividualData == nil {
								break
							}
							
							return e.complexity.Individual.IndividualData(childComplexity), true
						
			case "Individual.updatedAt":
							if e.complexity.Individual.UpdatedAt == nil {
								break
							}
							
							return e.complexity.Individual.UpdatedAt(childComplexity), true
						
			
		
	
		
			case "IndividualData.birthDate":
							if e.complexity.IndividualData.BirthDate == nil {
								break
							}
							
							return e.complexity.IndividualData.BirthDate(childComplexity), true
						
			case "IndividualData.code":
							if e.complexity.IndividualData.Code == nil {
								break
							}
							
							return e.complexity.IndividualData.Code(childComplexity), true
						
			case "IndividualData.name":
							if e.complexity.IndividualData.Name == nil {
								break
							}
							
							return e.complexity.IndividualData.Name(childComplexity), true
						
			case "IndividualData.surname":
							if e.complexity.IndividualData.Surname == nil {
								break
							}
							
							return e.complexity.IndividualData.Surname(childComplexity), true
						
			case "IndividualData.title":
							if e.complexity.IndividualData.Title == nil {
								break
							}
							
							return e.complexity.IndividualData.Title(childComplexity), true
						
			
		
	
		
			case "Offer.offerID":
							if e.complexity.Offer.OfferID == nil {
								break
							}
							
							return e.complexity.Offer.OfferID(childComplexity), true
						
			case "Offer.offerItems":
							if e.complexity.Offer.OfferItems == nil {
								break
							}
							
							return e.complexity.Offer.OfferItems(childComplexity), true
						
			case "Offer.totalPrice":
							if e.complexity.Offer.TotalPrice == nil {
								break
							}
							
							return e.complexity.Offer.TotalPrice(childComplexity), true
						
			
		
	
		
			case "OfferItem.offerItemID":
							if e.complexity.OfferItem.OfferItemID == nil {
								break
							}
							
							return e.complexity.OfferItem.OfferItemID(childComplexity), true
						
			case "OfferItem.priceFlight":
							if e.complexity.OfferItem.PriceFlight == nil {
								break
							}
							
							return e.complexity.OfferItem.PriceFlight(childComplexity), true
						
			case "OfferItem.priceHotel":
							if e.complexity.OfferItem.PriceHotel == nil {
								break
							}
							
							return e.complexity.OfferItem.PriceHotel(childComplexity), true
						
			case "OfferItem.services":
							if e.complexity.OfferItem.Services == nil {
								break
							}
							
							return e.complexity.OfferItem.Services(childComplexity), true
						
			
		
	
		
			case "PaxJourney.paxJourneyID":
							if e.complexity.PaxJourney.PaxJourneyID == nil {
								break
							}
							
							return e.complexity.PaxJourney.PaxJourneyID(childComplexity), true
						
			case "PaxJourney.paxSegmentRefID":
							if e.complexity.PaxJourney.PaxSegmentRefID == nil {
								break
							}
							
							return e.complexity.PaxJourney.PaxSegmentRefID(childComplexity), true
						
			
		
	
		
			case "PaxSegment.arrival":
							if e.complexity.PaxSegment.Arrival == nil {
								break
							}
							
							return e.complexity.PaxSegment.Arrival(childComplexity), true
						
			case "PaxSegment.dep":
							if e.complexity.PaxSegment.Dep == nil {
								break
							}
							
							return e.complexity.PaxSegment.Dep(childComplexity), true
						
			case "PaxSegment.MarketingCarrierInfo":
							if e.complexity.PaxSegment.MarketingCarrierInfo == nil {
								break
							}
							
							return e.complexity.PaxSegment.MarketingCarrierInfo(childComplexity), true
						
			case "PaxSegment.paxSegmentID":
							if e.complexity.PaxSegment.PaxSegmentID == nil {
								break
							}
							
							return e.complexity.PaxSegment.PaxSegmentID(childComplexity), true
						
			
		
	
		
			case "Price.gross":
							if e.complexity.Price.Gross == nil {
								break
							}
							
							return e.complexity.Price.Gross(childComplexity), true
						
			case "Price.net":
							if e.complexity.Price.Net == nil {
								break
							}
							
							return e.complexity.Price.Net(childComplexity), true
						
			
		
	
		
			case "PriceX.baseAmount":
							if e.complexity.PriceX.BaseAmount == nil {
								break
							}
							
							return e.complexity.PriceX.BaseAmount(childComplexity), true
						
			case "PriceX.fee":
							if e.complexity.PriceX.Fee == nil {
								break
							}
							
							return e.complexity.PriceX.Fee(childComplexity), true
						
			case "PriceX.surcharge":
							if e.complexity.PriceX.Surcharge == nil {
								break
							}
							
							return e.complexity.PriceX.Surcharge(childComplexity), true
						
			case "PriceX.taxSummary":
							if e.complexity.PriceX.TaxSummary == nil {
								break
							}
							
							return e.complexity.PriceX.TaxSummary(childComplexity), true
						
			case "PriceX.totalAmount":
							if e.complexity.PriceX.TotalAmount == nil {
								break
							}
							
							return e.complexity.PriceX.TotalAmount(childComplexity), true
						
			
		
	
		
			case "Query.flightX":
							if e.complexity.Query.FlightX == nil {
								break
							}
							
							return e.complexity.Query.FlightX(childComplexity), true
						
			
			
			
		
	
		
			case "ResponseX.dataLists":
							if e.complexity.ResponseX.DataLists == nil {
								break
							}
							
							return e.complexity.ResponseX.DataLists(childComplexity), true
						
			case "ResponseX.offersGroup":
							if e.complexity.ResponseX.OffersGroup == nil {
								break
							}
							
							return e.complexity.ResponseX.OffersGroup(childComplexity), true
						
			
		
	
		
			case "Service.paxRefID":
							if e.complexity.Service.PaxRefID == nil {
								break
							}
							
							return e.complexity.Service.PaxRefID(childComplexity), true
						
			case "Service.serviceAssociations":
							if e.complexity.Service.ServiceAssociations == nil {
								break
							}
							
							return e.complexity.Service.ServiceAssociations(childComplexity), true
						
			case "Service.serviceID":
							if e.complexity.Service.ServiceID == nil {
								break
							}
							
							return e.complexity.Service.ServiceID(childComplexity), true
						
			
		
	
		
			case "ServiceAssociations.paxJourneyRefID":
							if e.complexity.ServiceAssociations.PaxJourneyRefID == nil {
								break
							}
							
							return e.complexity.ServiceAssociations.PaxJourneyRefID(childComplexity), true
						
			
		
	
		
			case "SurchargeX.breakdown":
							if e.complexity.SurchargeX.Breakdown == nil {
								break
							}
							
							return e.complexity.SurchargeX.Breakdown(childComplexity), true
						
			case "SurchargeX.totalAmount":
							if e.complexity.SurchargeX.TotalAmount == nil {
								break
							}
							
							return e.complexity.SurchargeX.TotalAmount(childComplexity), true
						
			
		
	
		
			case "TaxSummaryType.tax":
							if e.complexity.TaxSummaryType.Tax == nil {
								break
							}
							
							return e.complexity.TaxSummaryType.Tax(childComplexity), true
						
			case "TaxSummaryType.totalTaxAmount":
							if e.complexity.TaxSummaryType.TotalTaxAmount == nil {
								break
							}
							
							return e.complexity.TaxSummaryType.TotalTaxAmount(childComplexity), true
						
			
		
	
		
			case "TaxType.amount":
							if e.complexity.TaxType.Amount == nil {
								break
							}
							
							return e.complexity.TaxType.Amount(childComplexity), true
						
			case "TaxType.descText":
							if e.complexity.TaxType.DescText == nil {
								break
							}
							
							return e.complexity.TaxType.DescText(childComplexity), true
						
			
		
	
		
			case "TextType.text":
							if e.complexity.TextType.Text == nil {
								break
							}
							
							return e.complexity.TextType.Text(childComplexity), true
						
			
		
	
		
			case "TransportArrivalType.IATA_LocationCode":
							if e.complexity.TransportArrivalType.IataLocationCode == nil {
								break
							}
							
							return e.complexity.TransportArrivalType.IataLocationCode(childComplexity), true
						
			
		
	
		
			case "TransportDepType.AircraftScheduledDateTime":
							if e.complexity.TransportDepType.AircraftScheduledDateTime == nil {
								break
							}
							
							return e.complexity.TransportDepType.AircraftScheduledDateTime(childComplexity), true
						
			case "TransportDepType.IATA_LocationCode":
							if e.complexity.TransportDepType.IataLocationCode == nil {
								break
							}
							
							return e.complexity.TransportDepType.IataLocationCode(childComplexity), true
						
			
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
		ec := executionContext{graphql.GetRequestContext(ctx), e}

		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
		return graphql.ErrorResponse(ctx, "mutations are not supported")
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
		return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
		&ast.Source{Name: "schema.graphql", Input: `schema {
  query: Query
}

type Query {
  flightX: FlightXQuery
}

type FlightXQuery {
  search(request:AirShoppingRQBasic): AirShoppingRS
  quote(offerID:ID): Boolean
  book(offerID:ID): Boolean
	retrieve(orderID:ID): Boolean
  cancel(orderID:ID): Boolean
  issue(orderID:ID): Boolean
}

input AirShoppingRQBasic{
  originDestination: [OriginDestination]
  pax: [iPax]
  carrier: [AirlineCode]
  
}

input iPax {
  age: Int!
}

input OriginDestination {
  originLoc: LocationCode
  destLoc: LocationCode
  date: Date
  
}

type AirShoppingRS {
  errors: [Error]
  response: ResponseX
}

type Error {
  code: String!
  type: String!
  description: String!
}

type ResponseX {
  offersGroup: [CarrierOffers]
  dataLists: DataLists
}

type DataLists {
  paxList: [FlightPax]
  paxJourneyList: [PaxJourney]
  paxSegmentList: [PaxSegment]
}
type PaxJourney {
  paxJourneyID:ID!
  paxSegmentRefID:[ID]
}
type PaxSegment {
  paxSegmentID: ID!
  MarketingCarrierInfo: DatedMarketingSegmentType
  arrival: TransportArrivalType
  dep: TransportDepType
}
type TransportArrivalType {
  IATA_LocationCode: String
}

scalar DateTime
scalar Date
scalar DateType

type AdviseMessage{
  code: ID!
  description: String!
  level: Int!
  external: ExternalMessage
  correlationID: ID!
}

type ExternalMessage{
  code: String
  message: String!
}

type Price{
  net: Float!
  gross: Float!
}

interface Node{
  code: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TransportDepType {
  IATA_LocationCode: String
  AircraftScheduledDateTime: DateTime
}

type DatedMarketingSegmentType {
  carrierDesigCode: String
  MarketingCarrierFlightNumberText: String
}

type FlightPax {
  age: Int!
  ptc: IATA_PTC_CodeType
  paxID: ID!
}

type CarrierOffers {
  carrier: String
  offers: [Offer] 
}

type Offer {
  offerID: ID
  totalPrice:Int
	offerItems: [OfferItem]
}

type OfferItem {
  offerItemID:ID
  priceHotel: Price
  priceFlight: PriceX
  services: [Service]
}
type PriceX {
	baseAmount: AmountType
  fee: [Fee]
  surcharge: [SurchargeX]
  taxSummary: [TaxSummaryType]
  totalAmount: AmountType
}
type SurchargeX {
  totalAmount: AmountType
  breakdown: [Fee]
}
type TaxSummaryType {
  totalTaxAmount: AmountType
  tax: [TaxType]
}
type TaxType {
  amount: AmountType
  descText: TextType
}
type Fee {
  amount:AmountType
  descText:TextType
}
type TextType{
  text: String
}
type AmountType {
  amount: Float
  curCode: String
}

type Service {
  serviceID: ID
  paxRefID: ID
  serviceAssociations: ServiceAssociations
}

type ServiceAssociations {
  paxJourneyRefID: [ID]
}

type Individual implements Node{
  code:ID!
  individualData:[IndividualData]
	createdAt: DateTime!
	updatedAt: DateTime!
  adviseMessage:[AdviseMessage]
  
}
type IndividualData{
  code:ID!
  name:ProperNameType
  surname:ProperNameType!
  birthDate:DateType
  title: TitleNameType
}
# ISO3009 
scalar ProperNameType
# PADIS NDC 19.1
#  MR
#  MRS
#  MISS
#  DR
scalar TitleNameType

#3-letters IATA location code
scalar LocationCode 

#2-letters IATA airline code
scalar AirlineCode 



enum IATA_PTC_CodeType {
  ADT
  CHD
  INF
}





`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_deprecated_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["reason"]; ok {
				arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["reason"] = arg0
	return args, nil
}

func (ec *executionContext) dir_include_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 bool
		if tmp, ok := rawArgs["if"]; ok {
				arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["if"] = arg0
	return args, nil
}

func (ec *executionContext) dir_skip_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 bool
		if tmp, ok := rawArgs["if"]; ok {
				arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["if"] = arg0
	return args, nil
}

func (ec *executionContext) field_FlightXQuery_book_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["offerID"]; ok {
				arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["offerID"] = arg0
	return args, nil
}

func (ec *executionContext) field_FlightXQuery_cancel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["orderID"]; ok {
				arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["orderID"] = arg0
	return args, nil
}

func (ec *executionContext) field_FlightXQuery_issue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["orderID"]; ok {
				arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["orderID"] = arg0
	return args, nil
}

func (ec *executionContext) field_FlightXQuery_quote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["offerID"]; ok {
				arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["offerID"] = arg0
	return args, nil
}

func (ec *executionContext) field_FlightXQuery_retrieve_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["orderID"]; ok {
				arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["orderID"] = arg0
	return args, nil
}

func (ec *executionContext) field_FlightXQuery_search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *AirShoppingRQBasic
		if tmp, ok := rawArgs["request"]; ok {
				arg0, err = ec.unmarshalOAirShoppingRQBasic2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRQBasic(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["request"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 string
		if tmp, ok := rawArgs["name"]; ok {
				arg0, err = ec.unmarshalNString2string(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 bool
		if tmp, ok := rawArgs["includeDeprecated"]; ok {
				arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 bool
		if tmp, ok := rawArgs["includeDeprecated"]; ok {
				arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["includeDeprecated"] = arg0
	return args, nil
}


// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************











	func (ec *executionContext) _fieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) interface{} {
		rctx := graphql.GetResolverContext(ctx)
		for _, d := range rctx.Field.Directives {
			switch d.Name {
			case "include":
					rawArgs := d.ArgumentMap(ec.Variables)
					args, err := ec.dir_include_args(ctx,rawArgs)
					if err != nil {
						ec.Error(ctx, err)
						return nil
					}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Include(ctx, obj, n, args["if"].(bool))
				}
			case "skip":
					rawArgs := d.ArgumentMap(ec.Variables)
					args, err := ec.dir_skip_args(ctx,rawArgs)
					if err != nil {
						ec.Error(ctx, err)
						return nil
					}
				n := next
				next = func(ctx context.Context) (interface{}, error) {
					return ec.directives.Skip(ctx, obj, n, args["if"].(bool))
				}
			}
		}
		res, err := ec.ResolverMiddleware(ctx, next)
		if err != nil {
			ec.Error(ctx, err)
			return nil
		}
		return res
	}


// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

	func (ec *executionContext) _AdviseMessage_code(ctx context.Context, field graphql.CollectedField, obj *AdviseMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AdviseMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Code, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AdviseMessage_description(ctx context.Context, field graphql.CollectedField, obj *AdviseMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AdviseMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AdviseMessage_level(ctx context.Context, field graphql.CollectedField, obj *AdviseMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AdviseMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Level, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(int)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNInt2int(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AdviseMessage_external(ctx context.Context, field graphql.CollectedField, obj *AdviseMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AdviseMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.External, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ExternalMessage)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOExternalMessage2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐExternalMessage(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AdviseMessage_correlationID(ctx context.Context, field graphql.CollectedField, obj *AdviseMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AdviseMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.CorrelationID, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AirShoppingRS_errors(ctx context.Context, field graphql.CollectedField, obj *AirShoppingRs) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AirShoppingRS",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Errors, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*Error)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOError2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐError(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AirShoppingRS_response(ctx context.Context, field graphql.CollectedField, obj *AirShoppingRs) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AirShoppingRS",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Response, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ResponseX)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOResponseX2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐResponseX(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AmountType_amount(ctx context.Context, field graphql.CollectedField, obj *AmountType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AmountType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Amount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*float64)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AmountType_curCode(ctx context.Context, field graphql.CollectedField, obj *AmountType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AmountType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.CurCode, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _CarrierOffers_carrier(ctx context.Context, field graphql.CollectedField, obj *CarrierOffers) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "CarrierOffers",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Carrier, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _CarrierOffers_offers(ctx context.Context, field graphql.CollectedField, obj *CarrierOffers) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "CarrierOffers",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Offers, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*Offer)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOffer2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOffer(ctx, field.Selections, res)
	}

	func (ec *executionContext) _DataLists_paxList(ctx context.Context, field graphql.CollectedField, obj *DataLists) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "DataLists",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxList, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*FlightPax)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOFlightPax2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFlightPax(ctx, field.Selections, res)
	}

	func (ec *executionContext) _DataLists_paxJourneyList(ctx context.Context, field graphql.CollectedField, obj *DataLists) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "DataLists",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxJourneyList, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*PaxJourney)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOPaxJourney2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxJourney(ctx, field.Selections, res)
	}

	func (ec *executionContext) _DataLists_paxSegmentList(ctx context.Context, field graphql.CollectedField, obj *DataLists) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "DataLists",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxSegmentList, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*PaxSegment)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOPaxSegment2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxSegment(ctx, field.Selections, res)
	}

	func (ec *executionContext) _DatedMarketingSegmentType_carrierDesigCode(ctx context.Context, field graphql.CollectedField, obj *DatedMarketingSegmentType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "DatedMarketingSegmentType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.CarrierDesigCode, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _DatedMarketingSegmentType_MarketingCarrierFlightNumberText(ctx context.Context, field graphql.CollectedField, obj *DatedMarketingSegmentType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "DatedMarketingSegmentType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.MarketingCarrierFlightNumberText, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Error_code(ctx context.Context, field graphql.CollectedField, obj *Error) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Error",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Code, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Error_type(ctx context.Context, field graphql.CollectedField, obj *Error) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Error",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Type, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Error_description(ctx context.Context, field graphql.CollectedField, obj *Error) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Error",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _ExternalMessage_code(ctx context.Context, field graphql.CollectedField, obj *ExternalMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "ExternalMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Code, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _ExternalMessage_message(ctx context.Context, field graphql.CollectedField, obj *ExternalMessage) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "ExternalMessage",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Message, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Fee_amount(ctx context.Context, field graphql.CollectedField, obj *Fee) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Fee",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Amount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AmountType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Fee_descText(ctx context.Context, field graphql.CollectedField, obj *Fee) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Fee",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DescText, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*TextType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTextType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTextType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightPax_age(ctx context.Context, field graphql.CollectedField, obj *FlightPax) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightPax",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Age, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(int)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNInt2int(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightPax_ptc(ctx context.Context, field graphql.CollectedField, obj *FlightPax) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightPax",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Ptc, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*IataPtcCodeType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOIATA_PTC_CodeType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIataPtcCodeType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightPax_paxID(ctx context.Context, field graphql.CollectedField, obj *FlightPax) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightPax",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxID, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightXQuery_search(ctx context.Context, field graphql.CollectedField, obj *FlightXQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightXQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_FlightXQuery_search_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Search, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AirShoppingRs)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAirShoppingRS2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRs(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightXQuery_quote(ctx context.Context, field graphql.CollectedField, obj *FlightXQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightXQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_FlightXQuery_quote_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Quote, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightXQuery_book(ctx context.Context, field graphql.CollectedField, obj *FlightXQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightXQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_FlightXQuery_book_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Book, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightXQuery_retrieve(ctx context.Context, field graphql.CollectedField, obj *FlightXQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightXQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_FlightXQuery_retrieve_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Retrieve, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightXQuery_cancel(ctx context.Context, field graphql.CollectedField, obj *FlightXQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightXQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_FlightXQuery_cancel_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Cancel, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _FlightXQuery_issue(ctx context.Context, field graphql.CollectedField, obj *FlightXQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "FlightXQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_FlightXQuery_issue_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Issue, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Individual_code(ctx context.Context, field graphql.CollectedField, obj *Individual) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Individual",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Code, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Individual_individualData(ctx context.Context, field graphql.CollectedField, obj *Individual) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Individual",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IndividualData, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*IndividualData)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOIndividualData2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIndividualData(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Individual_createdAt(ctx context.Context, field graphql.CollectedField, obj *Individual) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Individual",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.CreatedAt, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNDateTime2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Individual_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Individual) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Individual",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.UpdatedAt, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNDateTime2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Individual_adviseMessage(ctx context.Context, field graphql.CollectedField, obj *Individual) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Individual",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.AdviseMessage, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*AdviseMessage)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAdviseMessage2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAdviseMessage(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IndividualData_code(ctx context.Context, field graphql.CollectedField, obj *IndividualData) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IndividualData",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Code, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IndividualData_name(ctx context.Context, field graphql.CollectedField, obj *IndividualData) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IndividualData",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOProperNameType2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IndividualData_surname(ctx context.Context, field graphql.CollectedField, obj *IndividualData) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IndividualData",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Surname, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNProperNameType2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IndividualData_birthDate(ctx context.Context, field graphql.CollectedField, obj *IndividualData) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IndividualData",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.BirthDate, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalODateType2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IndividualData_title(ctx context.Context, field graphql.CollectedField, obj *IndividualData) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IndividualData",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Title, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTitleNameType2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Offer_offerID(ctx context.Context, field graphql.CollectedField, obj *Offer) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Offer",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.OfferID, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Offer_totalPrice(ctx context.Context, field graphql.CollectedField, obj *Offer) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Offer",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.TotalPrice, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*int)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Offer_offerItems(ctx context.Context, field graphql.CollectedField, obj *Offer) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Offer",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.OfferItems, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*OfferItem)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOfferItem2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOfferItem(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OfferItem_offerItemID(ctx context.Context, field graphql.CollectedField, obj *OfferItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OfferItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.OfferItemID, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OfferItem_priceHotel(ctx context.Context, field graphql.CollectedField, obj *OfferItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OfferItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PriceHotel, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*Price)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOPrice2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPrice(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OfferItem_priceFlight(ctx context.Context, field graphql.CollectedField, obj *OfferItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OfferItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PriceFlight, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*PriceX)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOPriceX2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPriceX(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OfferItem_services(ctx context.Context, field graphql.CollectedField, obj *OfferItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OfferItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Services, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*Service)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOService2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐService(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PaxJourney_paxJourneyID(ctx context.Context, field graphql.CollectedField, obj *PaxJourney) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PaxJourney",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxJourneyID, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PaxJourney_paxSegmentRefID(ctx context.Context, field graphql.CollectedField, obj *PaxJourney) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PaxJourney",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxSegmentRefID, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOID2ᚕᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PaxSegment_paxSegmentID(ctx context.Context, field graphql.CollectedField, obj *PaxSegment) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PaxSegment",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxSegmentID, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNID2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PaxSegment_MarketingCarrierInfo(ctx context.Context, field graphql.CollectedField, obj *PaxSegment) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PaxSegment",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.MarketingCarrierInfo, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*DatedMarketingSegmentType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalODatedMarketingSegmentType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐDatedMarketingSegmentType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PaxSegment_arrival(ctx context.Context, field graphql.CollectedField, obj *PaxSegment) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PaxSegment",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Arrival, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*TransportArrivalType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTransportArrivalType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTransportArrivalType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PaxSegment_dep(ctx context.Context, field graphql.CollectedField, obj *PaxSegment) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PaxSegment",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Dep, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*TransportDepType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTransportDepType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTransportDepType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Price_net(ctx context.Context, field graphql.CollectedField, obj *Price) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Price",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Net, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(float64)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNFloat2float64(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Price_gross(ctx context.Context, field graphql.CollectedField, obj *Price) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Price",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Gross, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(float64)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNFloat2float64(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PriceX_baseAmount(ctx context.Context, field graphql.CollectedField, obj *PriceX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PriceX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.BaseAmount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AmountType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PriceX_fee(ctx context.Context, field graphql.CollectedField, obj *PriceX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PriceX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Fee, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*Fee)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOFee2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFee(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PriceX_surcharge(ctx context.Context, field graphql.CollectedField, obj *PriceX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PriceX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Surcharge, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*SurchargeX)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOSurchargeX2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐSurchargeX(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PriceX_taxSummary(ctx context.Context, field graphql.CollectedField, obj *PriceX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PriceX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.TaxSummary, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*TaxSummaryType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTaxSummaryType2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxSummaryType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _PriceX_totalAmount(ctx context.Context, field graphql.CollectedField, obj *PriceX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "PriceX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.TotalAmount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AmountType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query_flightX(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Query().FlightX(rctx)
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*FlightXQuery)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOFlightXQuery2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFlightXQuery(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_Query___type_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.introspectSchema()
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Schema)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
	}

	func (ec *executionContext) _ResponseX_offersGroup(ctx context.Context, field graphql.CollectedField, obj *ResponseX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "ResponseX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.OffersGroup, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*CarrierOffers)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOCarrierOffers2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐCarrierOffers(ctx, field.Selections, res)
	}

	func (ec *executionContext) _ResponseX_dataLists(ctx context.Context, field graphql.CollectedField, obj *ResponseX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "ResponseX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DataLists, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*DataLists)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalODataLists2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐDataLists(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Service_serviceID(ctx context.Context, field graphql.CollectedField, obj *Service) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Service",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.ServiceID, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Service_paxRefID(ctx context.Context, field graphql.CollectedField, obj *Service) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Service",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxRefID, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Service_serviceAssociations(ctx context.Context, field graphql.CollectedField, obj *Service) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Service",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.ServiceAssociations, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceAssociations)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOServiceAssociations2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐServiceAssociations(ctx, field.Selections, res)
	}

	func (ec *executionContext) _ServiceAssociations_paxJourneyRefID(ctx context.Context, field graphql.CollectedField, obj *ServiceAssociations) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "ServiceAssociations",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PaxJourneyRefID, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOID2ᚕᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SurchargeX_totalAmount(ctx context.Context, field graphql.CollectedField, obj *SurchargeX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SurchargeX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.TotalAmount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AmountType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SurchargeX_breakdown(ctx context.Context, field graphql.CollectedField, obj *SurchargeX) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SurchargeX",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Breakdown, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*Fee)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOFee2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFee(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TaxSummaryType_totalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *TaxSummaryType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TaxSummaryType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.TotalTaxAmount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AmountType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TaxSummaryType_tax(ctx context.Context, field graphql.CollectedField, obj *TaxSummaryType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TaxSummaryType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Tax, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*TaxType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTaxType2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TaxType_amount(ctx context.Context, field graphql.CollectedField, obj *TaxType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TaxType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Amount, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*AmountType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TaxType_descText(ctx context.Context, field graphql.CollectedField, obj *TaxType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TaxType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DescText, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*TextType)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOTextType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTextType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TextType_text(ctx context.Context, field graphql.CollectedField, obj *TextType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TextType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Text, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TransportArrivalType_IATA_LocationCode(ctx context.Context, field graphql.CollectedField, obj *TransportArrivalType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TransportArrivalType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IataLocationCode, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TransportDepType_IATA_LocationCode(ctx context.Context, field graphql.CollectedField, obj *TransportDepType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TransportDepType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IataLocationCode, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _TransportDepType_AircraftScheduledDateTime(ctx context.Context, field graphql.CollectedField, obj *TransportDepType) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "TransportDepType",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.AircraftScheduledDateTime, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Locations, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Args, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.InputValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IsDeprecated(), nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNBoolean2bool(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DeprecationReason(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Args, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.InputValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Type, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IsDeprecated(), nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNBoolean2bool(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DeprecationReason(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Type, nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DefaultValue, nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Types(), nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.QueryType(), nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.MutationType(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.SubscriptionType(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Directives(), nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.Directive)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Kind(), nil
			})
		
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field___Type_fields_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.Field)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Interfaces(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PossibleTypes(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field___Type_enumValues_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.EnumValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.InputFields(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.InputValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.OfType(), nil
			})
		
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}






// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

	func (ec *executionContext) unmarshalInputAirShoppingRQBasic(ctx context.Context, obj interface{}) (AirShoppingRQBasic, error) {
		var it AirShoppingRQBasic
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "originDestination":
				var err error
					it.OriginDestination, err = ec.unmarshalOOriginDestination2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOriginDestination(ctx, v)
					if err != nil {
						return it, err
					}
			case "pax":
				var err error
					it.Pax, err = ec.unmarshalOiPax2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIPax(ctx, v)
					if err != nil {
						return it, err
					}
			case "carrier":
				var err error
					it.Carrier, err = ec.unmarshalOAirlineCode2ᚕᚖstring(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputOriginDestination(ctx context.Context, obj interface{}) (OriginDestination, error) {
		var it OriginDestination
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "originLoc":
				var err error
					it.OriginLoc, err = ec.unmarshalOLocationCode2ᚖstring(ctx, v)
					if err != nil {
						return it, err
					}
			case "destLoc":
				var err error
					it.DestLoc, err = ec.unmarshalOLocationCode2ᚖstring(ctx, v)
					if err != nil {
						return it, err
					}
			case "date":
				var err error
					it.Date, err = ec.unmarshalODate2ᚖstring(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputiPax(ctx context.Context, obj interface{}) (IPax, error) {
		var it IPax
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "age":
				var err error
					it.Age, err = ec.unmarshalNInt2int(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}


// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************


func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
			case Individual:
				return ec._Individual(ctx, sel, &obj)
		case *Individual:
			return ec._Individual(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************


var adviseMessageImplementors = []string{"AdviseMessage"}
func (ec *executionContext) _AdviseMessage(ctx context.Context, sel ast.SelectionSet,obj *AdviseMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, adviseMessageImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdviseMessage")
		case "code":
				out.Values[i] = ec._AdviseMessage_code(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec._AdviseMessage_description(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "level":
				out.Values[i] = ec._AdviseMessage_level(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "external":
				out.Values[i] = ec._AdviseMessage_external(ctx, field, obj)
		case "correlationID":
				out.Values[i] = ec._AdviseMessage_correlationID(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var airShoppingRSImplementors = []string{"AirShoppingRS"}
func (ec *executionContext) _AirShoppingRS(ctx context.Context, sel ast.SelectionSet,obj *AirShoppingRs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, airShoppingRSImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AirShoppingRS")
		case "errors":
				out.Values[i] = ec._AirShoppingRS_errors(ctx, field, obj)
		case "response":
				out.Values[i] = ec._AirShoppingRS_response(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var amountTypeImplementors = []string{"AmountType"}
func (ec *executionContext) _AmountType(ctx context.Context, sel ast.SelectionSet,obj *AmountType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, amountTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AmountType")
		case "amount":
				out.Values[i] = ec._AmountType_amount(ctx, field, obj)
		case "curCode":
				out.Values[i] = ec._AmountType_curCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var carrierOffersImplementors = []string{"CarrierOffers"}
func (ec *executionContext) _CarrierOffers(ctx context.Context, sel ast.SelectionSet,obj *CarrierOffers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, carrierOffersImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CarrierOffers")
		case "carrier":
				out.Values[i] = ec._CarrierOffers_carrier(ctx, field, obj)
		case "offers":
				out.Values[i] = ec._CarrierOffers_offers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var dataListsImplementors = []string{"DataLists"}
func (ec *executionContext) _DataLists(ctx context.Context, sel ast.SelectionSet,obj *DataLists) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, dataListsImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataLists")
		case "paxList":
				out.Values[i] = ec._DataLists_paxList(ctx, field, obj)
		case "paxJourneyList":
				out.Values[i] = ec._DataLists_paxJourneyList(ctx, field, obj)
		case "paxSegmentList":
				out.Values[i] = ec._DataLists_paxSegmentList(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var datedMarketingSegmentTypeImplementors = []string{"DatedMarketingSegmentType"}
func (ec *executionContext) _DatedMarketingSegmentType(ctx context.Context, sel ast.SelectionSet,obj *DatedMarketingSegmentType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, datedMarketingSegmentTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatedMarketingSegmentType")
		case "carrierDesigCode":
				out.Values[i] = ec._DatedMarketingSegmentType_carrierDesigCode(ctx, field, obj)
		case "MarketingCarrierFlightNumberText":
				out.Values[i] = ec._DatedMarketingSegmentType_MarketingCarrierFlightNumberText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var errorImplementors = []string{"Error"}
func (ec *executionContext) _Error(ctx context.Context, sel ast.SelectionSet,obj *Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, errorImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Error")
		case "code":
				out.Values[i] = ec._Error_code(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "type":
				out.Values[i] = ec._Error_type(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec._Error_description(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var externalMessageImplementors = []string{"ExternalMessage"}
func (ec *executionContext) _ExternalMessage(ctx context.Context, sel ast.SelectionSet,obj *ExternalMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, externalMessageImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExternalMessage")
		case "code":
				out.Values[i] = ec._ExternalMessage_code(ctx, field, obj)
		case "message":
				out.Values[i] = ec._ExternalMessage_message(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var feeImplementors = []string{"Fee"}
func (ec *executionContext) _Fee(ctx context.Context, sel ast.SelectionSet,obj *Fee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, feeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fee")
		case "amount":
				out.Values[i] = ec._Fee_amount(ctx, field, obj)
		case "descText":
				out.Values[i] = ec._Fee_descText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var flightPaxImplementors = []string{"FlightPax"}
func (ec *executionContext) _FlightPax(ctx context.Context, sel ast.SelectionSet,obj *FlightPax) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, flightPaxImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlightPax")
		case "age":
				out.Values[i] = ec._FlightPax_age(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "ptc":
				out.Values[i] = ec._FlightPax_ptc(ctx, field, obj)
		case "paxID":
				out.Values[i] = ec._FlightPax_paxID(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var flightXQueryImplementors = []string{"FlightXQuery"}
func (ec *executionContext) _FlightXQuery(ctx context.Context, sel ast.SelectionSet,obj *FlightXQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, flightXQueryImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlightXQuery")
		case "search":
				out.Values[i] = ec._FlightXQuery_search(ctx, field, obj)
		case "quote":
				out.Values[i] = ec._FlightXQuery_quote(ctx, field, obj)
		case "book":
				out.Values[i] = ec._FlightXQuery_book(ctx, field, obj)
		case "retrieve":
				out.Values[i] = ec._FlightXQuery_retrieve(ctx, field, obj)
		case "cancel":
				out.Values[i] = ec._FlightXQuery_cancel(ctx, field, obj)
		case "issue":
				out.Values[i] = ec._FlightXQuery_issue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var individualImplementors = []string{"Individual", "Node"}
func (ec *executionContext) _Individual(ctx context.Context, sel ast.SelectionSet,obj *Individual) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, individualImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Individual")
		case "code":
				out.Values[i] = ec._Individual_code(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "individualData":
				out.Values[i] = ec._Individual_individualData(ctx, field, obj)
		case "createdAt":
				out.Values[i] = ec._Individual_createdAt(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "updatedAt":
				out.Values[i] = ec._Individual_updatedAt(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "adviseMessage":
				out.Values[i] = ec._Individual_adviseMessage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var individualDataImplementors = []string{"IndividualData"}
func (ec *executionContext) _IndividualData(ctx context.Context, sel ast.SelectionSet,obj *IndividualData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, individualDataImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualData")
		case "code":
				out.Values[i] = ec._IndividualData_code(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "name":
				out.Values[i] = ec._IndividualData_name(ctx, field, obj)
		case "surname":
				out.Values[i] = ec._IndividualData_surname(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "birthDate":
				out.Values[i] = ec._IndividualData_birthDate(ctx, field, obj)
		case "title":
				out.Values[i] = ec._IndividualData_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var offerImplementors = []string{"Offer"}
func (ec *executionContext) _Offer(ctx context.Context, sel ast.SelectionSet,obj *Offer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, offerImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Offer")
		case "offerID":
				out.Values[i] = ec._Offer_offerID(ctx, field, obj)
		case "totalPrice":
				out.Values[i] = ec._Offer_totalPrice(ctx, field, obj)
		case "offerItems":
				out.Values[i] = ec._Offer_offerItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var offerItemImplementors = []string{"OfferItem"}
func (ec *executionContext) _OfferItem(ctx context.Context, sel ast.SelectionSet,obj *OfferItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, offerItemImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfferItem")
		case "offerItemID":
				out.Values[i] = ec._OfferItem_offerItemID(ctx, field, obj)
		case "priceHotel":
				out.Values[i] = ec._OfferItem_priceHotel(ctx, field, obj)
		case "priceFlight":
				out.Values[i] = ec._OfferItem_priceFlight(ctx, field, obj)
		case "services":
				out.Values[i] = ec._OfferItem_services(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var paxJourneyImplementors = []string{"PaxJourney"}
func (ec *executionContext) _PaxJourney(ctx context.Context, sel ast.SelectionSet,obj *PaxJourney) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, paxJourneyImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaxJourney")
		case "paxJourneyID":
				out.Values[i] = ec._PaxJourney_paxJourneyID(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "paxSegmentRefID":
				out.Values[i] = ec._PaxJourney_paxSegmentRefID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var paxSegmentImplementors = []string{"PaxSegment"}
func (ec *executionContext) _PaxSegment(ctx context.Context, sel ast.SelectionSet,obj *PaxSegment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, paxSegmentImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaxSegment")
		case "paxSegmentID":
				out.Values[i] = ec._PaxSegment_paxSegmentID(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "MarketingCarrierInfo":
				out.Values[i] = ec._PaxSegment_MarketingCarrierInfo(ctx, field, obj)
		case "arrival":
				out.Values[i] = ec._PaxSegment_arrival(ctx, field, obj)
		case "dep":
				out.Values[i] = ec._PaxSegment_dep(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var priceImplementors = []string{"Price"}
func (ec *executionContext) _Price(ctx context.Context, sel ast.SelectionSet,obj *Price) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, priceImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Price")
		case "net":
				out.Values[i] = ec._Price_net(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "gross":
				out.Values[i] = ec._Price_gross(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var priceXImplementors = []string{"PriceX"}
func (ec *executionContext) _PriceX(ctx context.Context, sel ast.SelectionSet,obj *PriceX) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, priceXImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceX")
		case "baseAmount":
				out.Values[i] = ec._PriceX_baseAmount(ctx, field, obj)
		case "fee":
				out.Values[i] = ec._PriceX_fee(ctx, field, obj)
		case "surcharge":
				out.Values[i] = ec._PriceX_surcharge(ctx, field, obj)
		case "taxSummary":
				out.Values[i] = ec._PriceX_taxSummary(ctx, field, obj)
		case "totalAmount":
				out.Values[i] = ec._PriceX_totalAmount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var queryImplementors = []string{"Query"}
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)
	
		ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
			Object: "Query",
		})
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "flightX":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._Query_flightX(ctx, field)
					return res
				})
		case "__type":
				out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
				out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var responseXImplementors = []string{"ResponseX"}
func (ec *executionContext) _ResponseX(ctx context.Context, sel ast.SelectionSet,obj *ResponseX) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, responseXImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResponseX")
		case "offersGroup":
				out.Values[i] = ec._ResponseX_offersGroup(ctx, field, obj)
		case "dataLists":
				out.Values[i] = ec._ResponseX_dataLists(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var serviceImplementors = []string{"Service"}
func (ec *executionContext) _Service(ctx context.Context, sel ast.SelectionSet,obj *Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, serviceImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Service")
		case "serviceID":
				out.Values[i] = ec._Service_serviceID(ctx, field, obj)
		case "paxRefID":
				out.Values[i] = ec._Service_paxRefID(ctx, field, obj)
		case "serviceAssociations":
				out.Values[i] = ec._Service_serviceAssociations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var serviceAssociationsImplementors = []string{"ServiceAssociations"}
func (ec *executionContext) _ServiceAssociations(ctx context.Context, sel ast.SelectionSet,obj *ServiceAssociations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, serviceAssociationsImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceAssociations")
		case "paxJourneyRefID":
				out.Values[i] = ec._ServiceAssociations_paxJourneyRefID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var surchargeXImplementors = []string{"SurchargeX"}
func (ec *executionContext) _SurchargeX(ctx context.Context, sel ast.SelectionSet,obj *SurchargeX) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, surchargeXImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurchargeX")
		case "totalAmount":
				out.Values[i] = ec._SurchargeX_totalAmount(ctx, field, obj)
		case "breakdown":
				out.Values[i] = ec._SurchargeX_breakdown(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var taxSummaryTypeImplementors = []string{"TaxSummaryType"}
func (ec *executionContext) _TaxSummaryType(ctx context.Context, sel ast.SelectionSet,obj *TaxSummaryType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, taxSummaryTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaxSummaryType")
		case "totalTaxAmount":
				out.Values[i] = ec._TaxSummaryType_totalTaxAmount(ctx, field, obj)
		case "tax":
				out.Values[i] = ec._TaxSummaryType_tax(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var taxTypeImplementors = []string{"TaxType"}
func (ec *executionContext) _TaxType(ctx context.Context, sel ast.SelectionSet,obj *TaxType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, taxTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaxType")
		case "amount":
				out.Values[i] = ec._TaxType_amount(ctx, field, obj)
		case "descText":
				out.Values[i] = ec._TaxType_descText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var textTypeImplementors = []string{"TextType"}
func (ec *executionContext) _TextType(ctx context.Context, sel ast.SelectionSet,obj *TextType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, textTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TextType")
		case "text":
				out.Values[i] = ec._TextType_text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var transportArrivalTypeImplementors = []string{"TransportArrivalType"}
func (ec *executionContext) _TransportArrivalType(ctx context.Context, sel ast.SelectionSet,obj *TransportArrivalType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, transportArrivalTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransportArrivalType")
		case "IATA_LocationCode":
				out.Values[i] = ec._TransportArrivalType_IATA_LocationCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var transportDepTypeImplementors = []string{"TransportDepType"}
func (ec *executionContext) _TransportDepType(ctx context.Context, sel ast.SelectionSet,obj *TransportDepType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, transportDepTypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransportDepType")
		case "IATA_LocationCode":
				out.Values[i] = ec._TransportDepType_IATA_LocationCode(ctx, field, obj)
		case "AircraftScheduledDateTime":
				out.Values[i] = ec._TransportDepType_AircraftScheduledDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __DirectiveImplementors = []string{"__Directive"}
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet,obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
				out.Values[i] = ec.___Directive_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
				out.Values[i] = ec.___Directive_locations(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "args":
				out.Values[i] = ec.___Directive_args(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet,obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
				out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
				out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "deprecationReason":
				out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __FieldImplementors = []string{"__Field"}
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet,obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
				out.Values[i] = ec.___Field_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
				out.Values[i] = ec.___Field_args(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "type":
				out.Values[i] = ec.___Field_type(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "isDeprecated":
				out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "deprecationReason":
				out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __InputValueImplementors = []string{"__InputValue"}
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet,obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
				out.Values[i] = ec.___InputValue_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
				out.Values[i] = ec.___InputValue_type(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "defaultValue":
				out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __SchemaImplementors = []string{"__Schema"}
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet,obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
				out.Values[i] = ec.___Schema_types(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "queryType":
				out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "mutationType":
				out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
				out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
				out.Values[i] = ec.___Schema_directives(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __TypeImplementors = []string{"__Type"}
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet,obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
				out.Values[i] = ec.___Type_kind(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "name":
				out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
				out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
				out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
				out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
				out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
				out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
				out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
				out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

	
		func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
						return graphql.UnmarshalBoolean(v)
		}

	
		func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
							res := graphql.MarshalBoolean(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
						return graphql.UnmarshalFloat(v)
		}

	
		func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
							res := graphql.MarshalFloat(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalID(v)
		}

	
		func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalID(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
						return graphql.UnmarshalInt(v)
		}

	
		func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
							res := graphql.MarshalInt(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNProperNameType2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalNProperNameType2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	

	
		func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
					return ec.___Directive(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	
		func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]string, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
					return ec.___EnumValue(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
					return ec.___Field(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
					return ec.___InputValue(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
					return ec.___Type(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec.___Type(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	

	
		func (ec *executionContext) marshalOAdviseMessage2githubᚗcomᚋaselmaᚋndcᚑgenᚐAdviseMessage(ctx context.Context, sel ast.SelectionSet, v AdviseMessage) graphql.Marshaler {
					return ec._AdviseMessage(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOAdviseMessage2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAdviseMessage(ctx context.Context, sel ast.SelectionSet, v []*AdviseMessage) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOAdviseMessage2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAdviseMessage(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOAdviseMessage2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAdviseMessage(ctx context.Context, sel ast.SelectionSet, v *AdviseMessage) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._AdviseMessage(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOAirShoppingRQBasic2githubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRQBasic(ctx context.Context, v interface{}) (AirShoppingRQBasic, error) {
					return ec.unmarshalInputAirShoppingRQBasic(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalOAirShoppingRQBasic2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRQBasic(ctx context.Context, v interface{}) (*AirShoppingRQBasic, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOAirShoppingRQBasic2githubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRQBasic(ctx, v)
				return &res, err
		}

	
	

	
		func (ec *executionContext) marshalOAirShoppingRS2githubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRs(ctx context.Context, sel ast.SelectionSet, v AirShoppingRs) graphql.Marshaler {
					return ec._AirShoppingRS(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOAirShoppingRS2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAirShoppingRs(ctx context.Context, sel ast.SelectionSet, v *AirShoppingRs) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._AirShoppingRS(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOAirlineCode2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOAirlineCode2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOAirlineCode2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]*string, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalOAirlineCode2ᚖstring(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalOAirlineCode2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
				for i := range v {
						ret[i] = ec.marshalOAirlineCode2ᚖstring(ctx, sel, v[i])
				}
				
				return ret
		}
	
		func (ec *executionContext) unmarshalOAirlineCode2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOAirlineCode2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOAirlineCode2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOAirlineCode2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOAmountType2githubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx context.Context, sel ast.SelectionSet, v AmountType) graphql.Marshaler {
					return ec._AmountType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOAmountType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐAmountType(ctx context.Context, sel ast.SelectionSet, v *AmountType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._AmountType(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
						return graphql.UnmarshalBoolean(v)
		}

	
		func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
						return graphql.MarshalBoolean(v)
		}
	
		func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOBoolean2bool(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOBoolean2bool(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOCarrierOffers2githubᚗcomᚋaselmaᚋndcᚑgenᚐCarrierOffers(ctx context.Context, sel ast.SelectionSet, v CarrierOffers) graphql.Marshaler {
					return ec._CarrierOffers(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOCarrierOffers2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐCarrierOffers(ctx context.Context, sel ast.SelectionSet, v []*CarrierOffers) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOCarrierOffers2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐCarrierOffers(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOCarrierOffers2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐCarrierOffers(ctx context.Context, sel ast.SelectionSet, v *CarrierOffers) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._CarrierOffers(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalODataLists2githubᚗcomᚋaselmaᚋndcᚑgenᚐDataLists(ctx context.Context, sel ast.SelectionSet, v DataLists) graphql.Marshaler {
					return ec._DataLists(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalODataLists2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐDataLists(ctx context.Context, sel ast.SelectionSet, v *DataLists) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._DataLists(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalODate2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalODate2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalODate2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalODate2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalODate2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalODate2string(ctx, sel, *v)
		}
	
		func (ec *executionContext) unmarshalODateTime2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalODateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalODateTime2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalODateTime2string(ctx, sel, *v)
		}
	
		func (ec *executionContext) unmarshalODateType2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalODateType2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalODateType2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalODateType2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalODateType2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalODateType2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalODatedMarketingSegmentType2githubᚗcomᚋaselmaᚋndcᚑgenᚐDatedMarketingSegmentType(ctx context.Context, sel ast.SelectionSet, v DatedMarketingSegmentType) graphql.Marshaler {
					return ec._DatedMarketingSegmentType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalODatedMarketingSegmentType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐDatedMarketingSegmentType(ctx context.Context, sel ast.SelectionSet, v *DatedMarketingSegmentType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._DatedMarketingSegmentType(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOError2githubᚗcomᚋaselmaᚋndcᚑgenᚐError(ctx context.Context, sel ast.SelectionSet, v Error) graphql.Marshaler {
					return ec._Error(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOError2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐError(ctx context.Context, sel ast.SelectionSet, v []*Error) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOError2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐError(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOError2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐError(ctx context.Context, sel ast.SelectionSet, v *Error) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._Error(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOExternalMessage2githubᚗcomᚋaselmaᚋndcᚑgenᚐExternalMessage(ctx context.Context, sel ast.SelectionSet, v ExternalMessage) graphql.Marshaler {
					return ec._ExternalMessage(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOExternalMessage2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐExternalMessage(ctx context.Context, sel ast.SelectionSet, v *ExternalMessage) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._ExternalMessage(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOFee2githubᚗcomᚋaselmaᚋndcᚑgenᚐFee(ctx context.Context, sel ast.SelectionSet, v Fee) graphql.Marshaler {
					return ec._Fee(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOFee2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFee(ctx context.Context, sel ast.SelectionSet, v []*Fee) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOFee2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFee(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOFee2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFee(ctx context.Context, sel ast.SelectionSet, v *Fee) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._Fee(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOFlightPax2githubᚗcomᚋaselmaᚋndcᚑgenᚐFlightPax(ctx context.Context, sel ast.SelectionSet, v FlightPax) graphql.Marshaler {
					return ec._FlightPax(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOFlightPax2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFlightPax(ctx context.Context, sel ast.SelectionSet, v []*FlightPax) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOFlightPax2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFlightPax(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOFlightPax2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFlightPax(ctx context.Context, sel ast.SelectionSet, v *FlightPax) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._FlightPax(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOFlightXQuery2githubᚗcomᚋaselmaᚋndcᚑgenᚐFlightXQuery(ctx context.Context, sel ast.SelectionSet, v FlightXQuery) graphql.Marshaler {
					return ec._FlightXQuery(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOFlightXQuery2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐFlightXQuery(ctx context.Context, sel ast.SelectionSet, v *FlightXQuery) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._FlightXQuery(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
						return graphql.UnmarshalFloat(v)
		}

	
		func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
						return graphql.MarshalFloat(v)
		}
	
		func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOFloat2float64(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOFloat2float64(ctx, sel, *v)
		}
	
		func (ec *executionContext) unmarshalOIATA_PTC_CodeType2githubᚗcomᚋaselmaᚋndcᚑgenᚐIataPtcCodeType(ctx context.Context, v interface{}) (IataPtcCodeType, error) {var res IataPtcCodeType
					return res, res.UnmarshalGQL(v)
		}

	
		func (ec *executionContext) marshalOIATA_PTC_CodeType2githubᚗcomᚋaselmaᚋndcᚑgenᚐIataPtcCodeType(ctx context.Context, sel ast.SelectionSet, v IataPtcCodeType) graphql.Marshaler {
					return v
		}
	
		func (ec *executionContext) unmarshalOIATA_PTC_CodeType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIataPtcCodeType(ctx context.Context, v interface{}) (*IataPtcCodeType, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOIATA_PTC_CodeType2githubᚗcomᚋaselmaᚋndcᚑgenᚐIataPtcCodeType(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOIATA_PTC_CodeType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIataPtcCodeType(ctx context.Context, sel ast.SelectionSet, v *IataPtcCodeType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return v
		}
	
		func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalID(v)
		}

	
		func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalID(v)
		}
	
		func (ec *executionContext) unmarshalOID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]*string, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalOID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
				for i := range v {
						ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
				}
				
				return ret
		}
	
		func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOID2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOID2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOIndividualData2githubᚗcomᚋaselmaᚋndcᚑgenᚐIndividualData(ctx context.Context, sel ast.SelectionSet, v IndividualData) graphql.Marshaler {
					return ec._IndividualData(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOIndividualData2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIndividualData(ctx context.Context, sel ast.SelectionSet, v []*IndividualData) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOIndividualData2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIndividualData(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOIndividualData2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIndividualData(ctx context.Context, sel ast.SelectionSet, v *IndividualData) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._IndividualData(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
						return graphql.UnmarshalInt(v)
		}

	
		func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
						return graphql.MarshalInt(v)
		}
	
		func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOInt2int(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOInt2int(ctx, sel, *v)
		}
	
		func (ec *executionContext) unmarshalOLocationCode2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOLocationCode2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOLocationCode2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOLocationCode2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOLocationCode2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOLocationCode2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOOffer2githubᚗcomᚋaselmaᚋndcᚑgenᚐOffer(ctx context.Context, sel ast.SelectionSet, v Offer) graphql.Marshaler {
					return ec._Offer(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOOffer2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOffer(ctx context.Context, sel ast.SelectionSet, v []*Offer) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOOffer2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOffer(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOOffer2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOffer(ctx context.Context, sel ast.SelectionSet, v *Offer) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._Offer(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOOfferItem2githubᚗcomᚋaselmaᚋndcᚑgenᚐOfferItem(ctx context.Context, sel ast.SelectionSet, v OfferItem) graphql.Marshaler {
					return ec._OfferItem(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOOfferItem2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOfferItem(ctx context.Context, sel ast.SelectionSet, v []*OfferItem) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOOfferItem2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOfferItem(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOOfferItem2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOfferItem(ctx context.Context, sel ast.SelectionSet, v *OfferItem) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._OfferItem(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOOriginDestination2githubᚗcomᚋaselmaᚋndcᚑgenᚐOriginDestination(ctx context.Context, v interface{}) (OriginDestination, error) {
					return ec.unmarshalInputOriginDestination(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalOOriginDestination2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOriginDestination(ctx context.Context, v interface{}) ([]*OriginDestination, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]*OriginDestination, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalOOriginDestination2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOriginDestination(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
	
		func (ec *executionContext) unmarshalOOriginDestination2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐOriginDestination(ctx context.Context, v interface{}) (*OriginDestination, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOOriginDestination2githubᚗcomᚋaselmaᚋndcᚑgenᚐOriginDestination(ctx, v)
				return &res, err
		}

	
	

	
		func (ec *executionContext) marshalOPaxJourney2githubᚗcomᚋaselmaᚋndcᚑgenᚐPaxJourney(ctx context.Context, sel ast.SelectionSet, v PaxJourney) graphql.Marshaler {
					return ec._PaxJourney(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOPaxJourney2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxJourney(ctx context.Context, sel ast.SelectionSet, v []*PaxJourney) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOPaxJourney2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxJourney(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOPaxJourney2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxJourney(ctx context.Context, sel ast.SelectionSet, v *PaxJourney) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._PaxJourney(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOPaxSegment2githubᚗcomᚋaselmaᚋndcᚑgenᚐPaxSegment(ctx context.Context, sel ast.SelectionSet, v PaxSegment) graphql.Marshaler {
					return ec._PaxSegment(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOPaxSegment2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxSegment(ctx context.Context, sel ast.SelectionSet, v []*PaxSegment) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOPaxSegment2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxSegment(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOPaxSegment2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPaxSegment(ctx context.Context, sel ast.SelectionSet, v *PaxSegment) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._PaxSegment(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOPrice2githubᚗcomᚋaselmaᚋndcᚑgenᚐPrice(ctx context.Context, sel ast.SelectionSet, v Price) graphql.Marshaler {
					return ec._Price(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOPrice2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPrice(ctx context.Context, sel ast.SelectionSet, v *Price) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._Price(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOPriceX2githubᚗcomᚋaselmaᚋndcᚑgenᚐPriceX(ctx context.Context, sel ast.SelectionSet, v PriceX) graphql.Marshaler {
					return ec._PriceX(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOPriceX2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐPriceX(ctx context.Context, sel ast.SelectionSet, v *PriceX) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._PriceX(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOProperNameType2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOProperNameType2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOProperNameType2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOProperNameType2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOProperNameType2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOProperNameType2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOResponseX2githubᚗcomᚋaselmaᚋndcᚑgenᚐResponseX(ctx context.Context, sel ast.SelectionSet, v ResponseX) graphql.Marshaler {
					return ec._ResponseX(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOResponseX2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐResponseX(ctx context.Context, sel ast.SelectionSet, v *ResponseX) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._ResponseX(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOService2githubᚗcomᚋaselmaᚋndcᚑgenᚐService(ctx context.Context, sel ast.SelectionSet, v Service) graphql.Marshaler {
					return ec._Service(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOService2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐService(ctx context.Context, sel ast.SelectionSet, v []*Service) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOService2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐService(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOService2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐService(ctx context.Context, sel ast.SelectionSet, v *Service) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._Service(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOServiceAssociations2githubᚗcomᚋaselmaᚋndcᚑgenᚐServiceAssociations(ctx context.Context, sel ast.SelectionSet, v ServiceAssociations) graphql.Marshaler {
					return ec._ServiceAssociations(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOServiceAssociations2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐServiceAssociations(ctx context.Context, sel ast.SelectionSet, v *ServiceAssociations) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._ServiceAssociations(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOString2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOString2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOSurchargeX2githubᚗcomᚋaselmaᚋndcᚑgenᚐSurchargeX(ctx context.Context, sel ast.SelectionSet, v SurchargeX) graphql.Marshaler {
					return ec._SurchargeX(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOSurchargeX2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐSurchargeX(ctx context.Context, sel ast.SelectionSet, v []*SurchargeX) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOSurchargeX2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐSurchargeX(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOSurchargeX2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐSurchargeX(ctx context.Context, sel ast.SelectionSet, v *SurchargeX) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._SurchargeX(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOTaxSummaryType2githubᚗcomᚋaselmaᚋndcᚑgenᚐTaxSummaryType(ctx context.Context, sel ast.SelectionSet, v TaxSummaryType) graphql.Marshaler {
					return ec._TaxSummaryType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOTaxSummaryType2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxSummaryType(ctx context.Context, sel ast.SelectionSet, v []*TaxSummaryType) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOTaxSummaryType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxSummaryType(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOTaxSummaryType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxSummaryType(ctx context.Context, sel ast.SelectionSet, v *TaxSummaryType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._TaxSummaryType(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOTaxType2githubᚗcomᚋaselmaᚋndcᚑgenᚐTaxType(ctx context.Context, sel ast.SelectionSet, v TaxType) graphql.Marshaler {
					return ec._TaxType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOTaxType2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxType(ctx context.Context, sel ast.SelectionSet, v []*TaxType) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalOTaxType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxType(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalOTaxType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTaxType(ctx context.Context, sel ast.SelectionSet, v *TaxType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._TaxType(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOTextType2githubᚗcomᚋaselmaᚋndcᚑgenᚐTextType(ctx context.Context, sel ast.SelectionSet, v TextType) graphql.Marshaler {
					return ec._TextType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOTextType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTextType(ctx context.Context, sel ast.SelectionSet, v *TextType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._TextType(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOTitleNameType2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOTitleNameType2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOTitleNameType2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOTitleNameType2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOTitleNameType2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOTitleNameType2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOTransportArrivalType2githubᚗcomᚋaselmaᚋndcᚑgenᚐTransportArrivalType(ctx context.Context, sel ast.SelectionSet, v TransportArrivalType) graphql.Marshaler {
					return ec._TransportArrivalType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOTransportArrivalType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTransportArrivalType(ctx context.Context, sel ast.SelectionSet, v *TransportArrivalType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._TransportArrivalType(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOTransportDepType2githubᚗcomᚋaselmaᚋndcᚑgenᚐTransportDepType(ctx context.Context, sel ast.SelectionSet, v TransportDepType) graphql.Marshaler {
					return ec._TransportDepType(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOTransportDepType2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐTransportDepType(ctx context.Context, sel ast.SelectionSet, v *TransportDepType) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._TransportDepType(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
					return ec.___Schema(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec.___Schema(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
					return ec.___Type(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec.___Type(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOiPax2githubᚗcomᚋaselmaᚋndcᚑgenᚐIPax(ctx context.Context, v interface{}) (IPax, error) {
					return ec.unmarshalInputiPax(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalOiPax2ᚕᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIPax(ctx context.Context, v interface{}) ([]*IPax, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]*IPax, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalOiPax2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIPax(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
	
		func (ec *executionContext) unmarshalOiPax2ᚖgithubᚗcomᚋaselmaᚋndcᚑgenᚐIPax(ctx context.Context, v interface{}) (*IPax, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOiPax2githubᚗcomᚋaselmaᚋndcᚑgenᚐIPax(ctx, v)
				return &res, err
		}

	

// endregion ***************************** type.gotpl *****************************
